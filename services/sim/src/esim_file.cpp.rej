diff a/services/sim/src/esim_file.cpp b/services/sim/src/esim_file.cpp	(rejected hunks)
@@ -16,7 +16,8 @@
 #include "esim_file.h"
 
 #include <unistd.h>
-
+#include <memory>
+#include <shared_mutex>
 #include "common_event_manager.h"
 #include "common_event_support.h"
 #include "core_manager_inner.h"
@@ -30,6 +31,7 @@
 #include "telephony_state_registry_client.h"
 #include "telephony_tag_def.h"
 #include "vcard_utils.h"
+#include "tel_ril_manager.h"
 using namespace OHOS::AppExecFwk;
 using namespace OHOS::EventFwk;
 
@@ -39,16 +41,33 @@ static constexpr const char *KEY_IMEI = "kIMEI";
 static constexpr const char *KEY_IMEI2 = "kIMEI2";
 static constexpr const char *KEY_NONCE = "kNonce";
 static constexpr const char *KEY_TIMESTAMP = "kTimestamp";
-EsimFile::EsimFile(std::shared_ptr<SimStateManager> simStateManager, int32_t slotId)
-    : IccFile("EsimFile", simStateManager)
+EsimFile::EsimFile(std::shared_ptr<ITelRilManager> telRilManager, int32_t slotId,
+    std::shared_ptr<AppExecFwk::EventRunner> eventRunner) : AppExecFwk::EventHandler(eventRunner)
 {
     slotId_ = slotId;
+    telRilManager_ = telRilManager;
     currentChannelId_ = 0;
     InitMemberFunc();
     InitChanneMemberFunc();
+    TELEPHONY_LOGI("esimFile init end");
 }
 
-void EsimFile::StartLoad() {}
+AppExecFwk::InnerEvent::Pointer EsimFile::BuildCallerInfo(int eventId)
+{
+    std::unique_ptr<FileToControllerMsg> object = std::make_unique<FileToControllerMsg>();
+    if (object == nullptr) {
+        TELEPHONY_LOGE("object is nullptr!");
+        return AppExecFwk::InnerEvent::Pointer(nullptr, nullptr);
+    }
+    int eventParam = 0;
+    AppExecFwk::InnerEvent::Pointer event = AppExecFwk::InnerEvent::Get(eventId, object, eventParam);
+    if (event == nullptr) {
+        TELEPHONY_LOGE("event is nullptr!");
+        return AppExecFwk::InnerEvent::Pointer(nullptr, nullptr);
+    }
+    event->SetOwner(shared_from_this());
+    return event;
+}
 
 ResultInnerCode EsimFile::ObtainChannelSuccessExclusive()
 {
@@ -144,9 +163,9 @@ std::string EsimFile::ObtainEid()
         SyncCloseChannel();
         return "";
     }
+    std::unique_lock<std::mutex> lock(getEidMutex_);
     // wait profileInfo is ready
     isEidReady_ = false;
-    std::unique_lock<std::mutex> lock(getEidMutex_);
     if (!getEidCv_.wait_for(lock, std::chrono::seconds(WAIT_TIME_LONG_SECOND_FOR_ESIM),
         [this]() { return isEidReady_; })) {
         SyncCloseChannel();
@@ -173,8 +192,8 @@ GetEuiccProfileInfoListInnerResult EsimFile::GetEuiccProfileInfoList()
         euiccProfileInfoList_.result_ = static_cast<int32_t>(ResultInnerCode::RESULT_EUICC_CARD_DATA_PROCESS_ERROR);
         return euiccProfileInfoList_;
     }
-    isAllProfileInfoReady_ = false;
     std::unique_lock<std::mutex> lock(allProfileInfoMutex_);
+    isAllProfileInfoReady_ = false;
     if (!allProfileInfoCv_.wait_for(lock, std::chrono::seconds(WAIT_TIME_LONG_SECOND_FOR_ESIM),
         [this]() { return isAllProfileInfoReady_; })) {
         SyncCloseChannel();
@@ -199,8 +218,8 @@ EuiccInfo EsimFile::GetEuiccInfo()
         SyncCloseChannel();
         return EuiccInfo();
     }
-    isEuiccInfo1Ready_ = false;
     std::unique_lock<std::mutex> lock(euiccInfo1Mutex_);
+    isEuiccInfo1Ready_ = false;
     if (!euiccInfo1Cv_.wait_for(lock, std::chrono::seconds(WAIT_TIME_LONG_SECOND_FOR_ESIM),
         [this]() { return isEuiccInfo1Ready_; })) {
         TELEPHONY_LOGE("close channal due to timeout");
@@ -791,8 +810,8 @@ int32_t EsimFile::DisableProfile(int32_t portIndex, const std::u16string &iccId)
         SyncCloseChannel();
         return disableProfileResult_;
     }
-    isDisableProfileReady_ = false;
     std::unique_lock<std::mutex> lock(disableProfileMutex_);
+    isDisableProfileReady_ = false;
     if (!disableProfileCv_.wait_for(lock, std::chrono::seconds(WAIT_TIME_LONG_SECOND_FOR_ESIM),
         [this]() { return isDisableProfileReady_; })) {
         SyncCloseChannel();
@@ -816,8 +835,8 @@ std::string EsimFile::ObtainSmdsAddress(int32_t portIndex)
         SyncCloseChannel();
         return "";
     }
-    isSmdsAddressReady_ = false;
     std::unique_lock<std::mutex> lock(smdsAddressMutex_);
+    isSmdsAddressReady_ = false;
     if (!smdsAddressCv_.wait_for(lock, std::chrono::seconds(WAIT_TIME_LONG_SECOND_FOR_ESIM),
         [this]() { return isSmdsAddressReady_; })) {
         SyncCloseChannel();
@@ -841,8 +860,8 @@ EuiccRulesAuthTable EsimFile::ObtainRulesAuthTable(int32_t portIndex)
         SyncCloseChannel();
         return EuiccRulesAuthTable();
     }
-    isRulesAuthTableReady_ = false;
     std::unique_lock<std::mutex> lock(rulesAuthTableMutex_);
+    isRulesAuthTableReady_ = false;
     if (!rulesAuthTableCv_.wait_for(lock, std::chrono::seconds(WAIT_TIME_LONG_SECOND_FOR_ESIM),
         [this]() { return isRulesAuthTableReady_; })) {
         SyncCloseChannel();
@@ -870,8 +889,8 @@ ResponseEsimInnerResult EsimFile::ObtainEuiccChallenge(int32_t portIndex)
             static_cast<int32_t>(ResultInnerCode::RESULT_EUICC_CARD_DATA_PROCESS_ERROR);
         return responseChallengeResult_;
     }
-    isEuiccChallengeReady_ = false;
     std::unique_lock<std::mutex> lock(euiccChallengeMutex_);
+    isEuiccChallengeReady_ = false;
     if (!euiccChallengeCv_.wait_for(lock, std::chrono::seconds(WAIT_TIME_LONG_SECOND_FOR_ESIM),
         [this]() { return isEuiccChallengeReady_; })) {
         SyncCloseChannel();
@@ -1017,7 +1036,7 @@ bool EsimFile::ProcessObtainSmdsAddressDone(const AppExecFwk::InnerEvent::Pointe
     return true;
 }
 
-struct CarrierIdentifier CarrierIdentifiers(const std::vector<uint8_t> &mccMncData, int mccMncLen,
+struct CarrierIdentifier EsimFile::CarrierIdentifiers(const std::vector<uint8_t> &mccMncData, int mccMncLen,
     const std::u16string &gid1, const std::u16string &gid2)
 {
     std::string strResult = Asn1Utils::BytesToHexStr(mccMncData);
@@ -1039,7 +1058,7 @@ struct CarrierIdentifier CarrierIdentifiers(const std::vector<uint8_t> &mccMncDa
     return carrierId;
 }
 
-struct CarrierIdentifier buildCarrierIdentifiers(std::shared_ptr<Asn1Node> &root)
+struct CarrierIdentifier EsimFile::buildCarrierIdentifiers(const std::shared_ptr<Asn1Node> &root)
 {
     std::u16string gid1;
     std::u16string gid2;
@@ -1106,12 +1125,12 @@ bool EsimFile::RequestRulesAuthTableParseTagCtxComp0(std::shared_ptr<Asn1Node> &
         if (grandson == nullptr) {
             return false;
         }
-        int32_t policyRules = grandson->Asn1AsInteger();
+        int32_t policyRules = grandson->Asn1AsBits();
         grandson = node->Asn1GetGrandson(TAG_ESIM_SEQUENCE, TAG_ESIM_CTX_2);
         if (grandson == nullptr) {
             return false;
         }
-        int32_t policyRuleFlags = grandson->Asn1AsInteger();
+        int32_t policyRuleFlags = grandson->Asn1AsBits();
         eUiccRulesAuthTable_.policyRules_.push_back(policyRules);
         eUiccRulesAuthTable_.policyRuleFlags_.push_back(policyRuleFlags);
     }
@@ -1176,8 +1195,8 @@ std::string EsimFile::ObtainDefaultSmdpAddress()
         SyncCloseChannel();
         return "";
     }
-    isObtainDefaultSmdpAddressReady_ = false;
     std::unique_lock<std::mutex> lock(obtainDefaultSmdpAddressMutex_);
+    isObtainDefaultSmdpAddressReady_ = false;
     if (!obtainDefaultSmdpAddressCv_.wait_for(lock, std::chrono::seconds(WAIT_TIME_LONG_SECOND_FOR_ESIM),
         [this]() { return isObtainDefaultSmdpAddressReady_; })) {
         SyncCloseChannel();
@@ -1205,8 +1224,8 @@ ResponseEsimInnerResult EsimFile::CancelSession(const std::u16string &transactio
         cancelSessionResult_.resultCode_ = static_cast<int32_t>(ResultInnerCode::RESULT_EUICC_CARD_DATA_PROCESS_ERROR);
         return cancelSessionResult_;
     }
-    isCancelSessionReady_ = false;
     std::unique_lock<std::mutex> lock(cancelSessionMutex_);
+    isCancelSessionReady_ = false;
     if (!cancelSessionCv_.wait_for(lock, std::chrono::seconds(WAIT_TIME_LONG_SECOND_FOR_ESIM),
         [this]() { return isCancelSessionReady_; })) {
         SyncCloseChannel();
@@ -1233,8 +1252,8 @@ EuiccProfile EsimFile::ObtainProfile(int32_t portIndex, const std::u16string &ic
         SyncCloseChannel();
         return eUiccProfile_;
     }
-    isObtainProfileReady_ = false;
     std::unique_lock<std::mutex> lock(obtainProfileMutex_);
+    isObtainProfileReady_ = false;
     if (!obtainProfileCv_.wait_for(lock, std::chrono::seconds(WAIT_TIME_LONG_SECOND_FOR_ESIM),
         [this]() { return isObtainProfileReady_; })) {
         SyncCloseChannel();
@@ -1452,8 +1471,8 @@ int32_t EsimFile::ResetMemory(ResetOption resetOption)
         SyncCloseChannel();
         return resetResult_;
     }
-    isResetMemoryReady_ = false;
     std::unique_lock<std::mutex> lock(resetMemoryMutex_);
+    isResetMemoryReady_ = false;
     if (!resetMemoryCv_.wait_for(lock, std::chrono::seconds(WAIT_TIME_LONG_SECOND_FOR_ESIM),
         [this]() { return isResetMemoryReady_; })) {
         SyncCloseChannel();
@@ -1479,8 +1498,8 @@ int32_t EsimFile::SetDefaultSmdpAddress(const std::u16string &defaultSmdpAddress
         SyncCloseChannel();
         return setDpAddressResult_;
     }
-    isSetDefaultSmdpAddressReady_ = false;
     std::unique_lock<std::mutex> lock(setDefaultSmdpAddressMutex_);
+    isSetDefaultSmdpAddressReady_ = false;
     if (!setDefaultSmdpAddressCv_.wait_for(lock, std::chrono::seconds(WAIT_TIME_LONG_SECOND_FOR_ESIM),
         [this]() { return isSetDefaultSmdpAddressReady_; })) {
         SyncCloseChannel();
@@ -1570,6 +1589,7 @@ ResponseEsimInnerResult EsimFile::SendApduData(const std::u16string &aid, const
             static_cast<int32_t>(ResultInnerCode::RESULT_EUICC_CARD_CHANNEL_CLOSE_FAILED);
         return transApduDataResponse_;
     }
+
     esimProfile_.apduData = apduData;
     AppExecFwk::InnerEvent::Pointer eventSendApduData = BuildCallerInfo(MSG_ESIM_SEND_APUD_DATA);
     ResultInnerCode resultFlag = ObtainChannelSuccessAlllowSameAidReuse(aid);
@@ -1585,8 +1605,8 @@ ResponseEsimInnerResult EsimFile::SendApduData(const std::u16string &aid, const
             static_cast<int32_t>(ResultInnerCode::RESULT_EUICC_CARD_DATA_PROCESS_ERROR);
         return transApduDataResponse_;
     }
-    isSendApduDataReady_ = false;
     std::unique_lock<std::mutex> lock(sendApduDataMutex_);
+    isSendApduDataReady_ = false;
     if (!sendApduDataCv_.wait_for(lock, std::chrono::seconds(WAIT_TIME_LONG_SECOND_FOR_ESIM),
         [this]() { return isSendApduDataReady_; })) {
         SyncCloseChannel();
@@ -1753,7 +1773,7 @@ ResponseEsimBppResult EsimFile::ObtainLoadBoundProfilePackage(int32_t portIndex,
     return loadBPPResult_;
 }
 
-EuiccNotificationList EsimFile::ListNotifications(int32_t portIndex, Event events)
+EuiccNotificationList EsimFile::ListNotifications(int32_t portIndex, EsimEvent events)
 {
     esimProfile_.portIndex = portIndex;
     esimProfile_.events = events;
@@ -1769,8 +1789,8 @@ EuiccNotificationList EsimFile::ListNotifications(int32_t portIndex, Event event
         SyncCloseChannel();
         return EuiccNotificationList();
     }
-    isListNotificationsReady_ = false;
     std::unique_lock<std::mutex> lock(listNotificationsMutex_);
+    isListNotificationsReady_ = false;
     if (!listNotificationsCv_.wait_for(lock, std::chrono::seconds(WAIT_TIME_LONG_SECOND_FOR_ESIM),
         [this]() { return isListNotificationsReady_; })) {
         SyncCloseChannel();
@@ -2224,7 +2244,7 @@ std::shared_ptr<Asn1Node> EsimFile::LoadBoundProfilePackageParseProfileInstallRe
 }
 
 bool EsimFile::ProcessListNotifications(
-    int32_t slotId, Event events, const AppExecFwk::InnerEvent::Pointer &responseEvent)
+    int32_t slotId, EsimEvent events, const AppExecFwk::InnerEvent::Pointer &responseEvent)
 {
     if (!IsLogicChannelOpen()) {
         return false;
@@ -2364,7 +2384,7 @@ bool EsimFile::ProcessListNotificationsDone(const AppExecFwk::InnerEvent::Pointe
     return true;
 }
 
-EuiccNotificationList EsimFile::RetrieveNotificationList(int32_t portIndex, Event events)
+EuiccNotificationList EsimFile::RetrieveNotificationList(int32_t portIndex, EsimEvent events)
 {
     esimProfile_.portIndex = portIndex;
     esimProfile_.events = events;
@@ -2380,8 +2400,8 @@ EuiccNotificationList EsimFile::RetrieveNotificationList(int32_t portIndex, Even
         SyncCloseChannel();
         return EuiccNotificationList();
     }
-    isRetrieveNotificationListReady_ = false;
     std::unique_lock<std::mutex> lock(retrieveNotificationListMutex_);
+    isRetrieveNotificationListReady_ = false;
     if (!retrieveNotificationListCv_.wait_for(lock, std::chrono::seconds(WAIT_TIME_LONG_SECOND_FOR_ESIM),
         [this]() { return isRetrieveNotificationListReady_; })) {
         SyncCloseChannel();
@@ -2407,8 +2427,8 @@ EuiccNotification EsimFile::ObtainRetrieveNotification(int32_t portIndex, int32_
         SyncCloseChannel();
         return EuiccNotification();
     }
-    isRetrieveNotificationReady_ = false;
     std::unique_lock<std::mutex> lock(retrieveNotificationMutex_);
+    isRetrieveNotificationReady_ = false;
     if (!retrieveNotificationCv_.wait_for(lock, std::chrono::seconds(WAIT_TIME_LONG_SECOND_FOR_ESIM),
         [this]() { return isRetrieveNotificationReady_; })) {
         SyncCloseChannel();
@@ -2436,8 +2456,8 @@ int32_t EsimFile::RemoveNotificationFromList(int32_t portIndex, int32_t seqNumbe
         SyncCloseChannel();
         return removeNotifResult_;
     }
-    isRemoveNotificationReady_ = false;
     std::unique_lock<std::mutex> lock(removeNotificationMutex_);
+    isRemoveNotificationReady_ = false;
     if (!removeNotificationCv_.wait_for(lock, std::chrono::seconds(WAIT_TIME_LONG_SECOND_FOR_ESIM),
         [this]() { return isRemoveNotificationReady_; })) {
         SyncCloseChannel();
@@ -2448,7 +2468,7 @@ int32_t EsimFile::RemoveNotificationFromList(int32_t portIndex, int32_t seqNumbe
 }
 
 bool EsimFile::ProcessRetrieveNotificationList(
-    int32_t slotId, Event events, const AppExecFwk::InnerEvent::Pointer &responseEvent)
+    int32_t slotId, EsimEvent events, const AppExecFwk::InnerEvent::Pointer &responseEvent)
 {
     if (!IsLogicChannelOpen()) {
         return false;
@@ -2684,8 +2704,8 @@ int32_t EsimFile::DeleteProfile(const std::u16string &iccId)
         SyncCloseChannel();
         return delProfile_;
     }
-    isDeleteProfileReady_ = false;
     std::unique_lock<std::mutex> lock(deleteProfileMutex_);
+    isDeleteProfileReady_ = false;
     if (!deleteProfileCv_.wait_for(lock, std::chrono::seconds(WAIT_TIME_LONG_SECOND_FOR_ESIM),
         [this]() { return isDeleteProfileReady_; })) {
         SyncCloseChannel();
@@ -2713,8 +2733,8 @@ int32_t EsimFile::SwitchToProfile(int32_t portIndex, const std::u16string &iccId
         SyncCloseChannel();
         return switchResult_;
     }
-    isSwitchToProfileReady_ = false;
     std::unique_lock<std::mutex> lock(switchToProfileMutex_);
+    isSwitchToProfileReady_ = false;
     if (!switchToProfileCv_.wait_for(lock, std::chrono::seconds(WAIT_TIME_LONG_SECOND_FOR_ESIM),
         [this]() { return isSwitchToProfileReady_; })) {
         SyncCloseChannel();
@@ -2741,8 +2761,8 @@ int32_t EsimFile::SetProfileNickname(const std::u16string &iccId, const std::u16
         SyncCloseChannel();
         return setNicknameResult_;
     }
-    isSetNicknameReady_ = false;
     std::unique_lock<std::mutex> lock(setNicknameMutex_);
+    isSetNicknameReady_ = false;
     if (!setNicknameCv_.wait_for(lock, std::chrono::seconds(WAIT_TIME_LONG_SECOND_FOR_ESIM),
         [this]() { return isSetNicknameReady_; })) {
         SyncCloseChannel();
@@ -2917,8 +2937,8 @@ EuiccInfo2 EsimFile::ObtainEuiccInfo2(int32_t portIndex)
         euiccInfo2Result_.resultCode_ = static_cast<int32_t>(ResultInnerCode::RESULT_EUICC_CARD_DATA_PROCESS_ERROR);
         return euiccInfo2Result_;
     }
-    isEuiccInfo2Ready_ = false;
     std::unique_lock<std::mutex> lock(euiccInfo2Mutex_);
+    isEuiccInfo2Ready_ = false;
     if (!euiccInfo2Cv_.wait_for(lock, std::chrono::seconds(WAIT_TIME_LONG_SECOND_FOR_ESIM),
         [this]() { return isEuiccInfo2Ready_; })) {
         SyncCloseChannel();
@@ -3516,8 +3536,8 @@ std::string EsimFile::GetContractInfo(const GetContractInfoRequest &getContractI
         SyncCloseChannel();
         return getContractInfoResult_;
     }
-    isGetContractInfoReady_ = false;
     std::unique_lock<std::mutex> lock(getContractInfoMutex_);
+    isGetContractInfoReady_ = false;
     if (!getContractInfoCv_.wait_for(lock, std::chrono::seconds(WAIT_TIME_LONG_SECOND_FOR_ESIM),
         [this]() { return isGetContractInfoReady_; })) {
         SyncCloseChannel();
@@ -3627,8 +3647,6 @@ void EsimFile::ProcessEvent(const AppExecFwk::InnerEvent::Pointer &event)
             bool isFileProcessResponse = memberFunc(event);
             return;
         }
-    } else {
-        IccFile::ProcessEvent(event);
     }
 }
 
@@ -3661,11 +3679,6 @@ std::shared_ptr<Asn1Node> EsimFile::ParseEvent(const AppExecFwk::InnerEvent::Poi
     return Asn1ParseResponse(responseByte, byteLen);
 }
 
-int32_t EsimFile::ObtainSpnCondition(bool roaming, const std::string &operatorNum)
-{
-    return 0;
-}
-
 bool EsimFile::IsSameAid(const std::u16string &aid)
 {
     std::lock_guard<std::mutex> lock(occupyChannelMutex_);
@@ -3684,50 +3697,5 @@ bool EsimFile::IsValidAidForAllowSameAidReuseChannel(const std::u16string &aid)
         return true;
     }
 }
-
-bool EsimFile::ProcessIccReady(const AppExecFwk::InnerEvent::Pointer &event)
-{
-    return false;
-}
-
-bool EsimFile::UpdateVoiceMail(const std::string &mailName, const std::string &mailNumber)
-{
-    return false;
-}
-
-bool EsimFile::SetVoiceMailCount(int32_t voiceMailCount)
-{
-    return false;
-}
-
-bool EsimFile::SetVoiceCallForwarding(bool enable, const std::string &number)
-{
-    return false;
-}
-
-std::string EsimFile::GetVoiceMailNumber()
-{
-    return "";
-}
-
-void EsimFile::SetVoiceMailNumber(const std::string mailNumber)
-{
-    return;
-}
-
-void EsimFile::ProcessIccRefresh(int msgId)
-{
-    return;
-}
-
-void EsimFile::ProcessFileLoaded(bool response)
-{
-    return;
-}
-
-void EsimFile::OnAllFilesFetched()
-{
-    return;
-}
 } // namespace Telephony
 } // namespace OHOS
\ No newline at end of file
